<?php
/*
######################### Advance ORM Example ###################################################
$usersWithTodos = User::whereHas('todos', function ($query) {
    $query->where('user_id', 11); // ุชุญุฏูุฏ ุงููุณุชุฎุฏู ุงูุฐู ูููู todos ูุนููุฉ (ูุซุงู: user_id = 11)
})
->with('todos') // ุฌูุจ ุงูููุงู ุงูุฎุงุตุฉ ุจูู ูุณุชุฎุฏู
->get(); // ุงุณุชุฑุฌุงุน ุงูุจูุงูุงุช


1. ุงูุญุตูู ุนูู ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ููุงู ุจุงุณุชุฎุฏุงู JOIN
use Illuminate\Support\Facades\DB;

$usersWithTodos = DB::table('users')
    ->join('todos', 'users.id', '=', 'todos.user_id') // ุฑุจุท ุฌุฏูู users ูุน todos
    ->select('users.id', 'users.name', 'users.email', 'todos.*') // ุชุญุฏูุฏ ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ
    ->get();

dd($usersWithTodos); // ุทุจุงุนุฉ ุงููุชูุฌุฉ


2. ุงูุญุตูู ุนูู ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ููุงู ุจุงุณุชุฎุฏุงู WHERE EXISTS
$usersWithTodos = DB::table('users')
    ->whereExists(function ($query) {
        $query->select(DB::raw(1))
              ->from('todos')
              ->whereRaw('todos.user_id = users.id');  
    })
    ->get();

dd($usersWithTodos);



 ูุฐุง ุงูููุฏ ุณูุนุฑุถ ุฌููุน ุงููุณุชุฎุฏููู ุงูุฐูู ููุณ ูุฏููู ุฃู ููุงู ูู ุฌุฏูู todos.
use Illuminate\Support\Facades\DB;

$usersWithoutTodos = DB::table('users')
    ->leftJoin('todos', 'users.id', '=', 'todos.user_id')
    ->whereNull('todos.id') // ุงูุชุฃูุฏ ูู ุฃู ุงููุณุชุฎุฏู ูุง ูููู ููุงู
    ->select('users.*') // ุชุญุฏูุฏ ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ ูู ุฌุฏูู ุงููุณุชุฎุฏููู
    ->get();

dd($usersWithoutTodos); // ุทุจุงุนุฉ ุงููุชูุฌุฉ ูููุญุต


โ 1. ุงูุญุตูู ุนูู ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ููุงู ุจุงุณุชุฎุฏุงู JOIN
php
Copy
Edit
use Illuminate\Support\Facades\DB;

$usersWithTodos = DB::table('users')
    ->join('todos', 'users.id', '=', 'todos.user_id') // ุฑุจุท ุฌุฏูู users ูุน todos
    ->select('users.id', 'users.name', 'users.email', 'todos.*') // ุชุญุฏูุฏ ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ
    ->get();

dd($usersWithTodos); // ุทุจุงุนุฉ ุงููุชูุฌุฉ
โ 2. ุงูุญุตูู ุนูู ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ููุงู ุจุงุณุชุฎุฏุงู WHERE EXISTS
php
Copy
Edit
$usersWithTodos = DB::table('users')
    ->whereExists(function ($query) {
        $query->select(DB::raw(1))
              ->from('todos')
              ->whereRaw('todos.user_id = users.id');  
    })
    ->get();

dd($usersWithTodos);
๐ ุดุฑุญ ุงูููุฏ:
JOIN:

ูุณุชุฎุฏู join('todos', 'users.id', '=', 'todos.user_id') ูุฌูุจ ุงููุณุชุฎุฏููู ุงููุฑุชุจุทูู ุจููุงู.
select('users.id', 'users.name', 'users.email', 'todos.*') ูุญุฏุฏ ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ.
->get(); ูุฌูุจ ุงูุจูุงูุงุช.
WHERE EXISTS:

ูุณุชุฎุฏู whereExists() ููุชุฃูุฏ ูู ุฃู ููุงู ุณุฌููุง ูู todos ูุทุงุจู users.id.
select(DB::raw(1)) ูุณุชุฎุฏู ููุชุญูู ูู ูุฌูุฏ ุงูุจูุงูุงุช ุฏูู ุงูุญุงุฌุฉ ุฅูู ุฌูุจ ุงูุฃุนูุฏุฉ.
whereRaw('todos.user_id = users.id') ูุฑุจุท ุงููุณุชุฎุฏููู ุจุงูููุงู.
->get(); ูุฌูุจ ุงูุจูุงูุงุช.
โ ูุฐุง ุงูููุฏ ุณูุนูุฏ ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ููุงู ุจุงุณุชุฎุฏุงู ุทุฑููุชูู ูุฎุชููุชูู! ๐


1๏ธโฃ INNER JOIN (JOIN) - ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ููุงู
$usersWithTodos = DB::table('users')
    ->join('todos', 'users.id', '=', 'todos.user_id') // INNER JOIN
    ->select('users.id', 'users.name', 'users.email', 'todos.*')
    ->get();

dd($usersWithTodos);
โ ูุฌูุจ ููุท ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ููุงู ูู ุฌุฏูู todos.

2๏ธโฃ LEFT JOIN - ุฌููุน ุงููุณุชุฎุฏููู ูุน ุฃู ุจุฏูู ููุงู
$usersWithOrWithoutTodos = DB::table('users')
    ->leftJoin('todos', 'users.id', '=', 'todos.user_id') // LEFT JOIN
    ->select('users.id', 'users.name', 'users.email', 'todos.*')
    ->get();

dd($usersWithOrWithoutTodos);
โ ูุฌูุจ ุฌููุน ุงููุณุชุฎุฏูููุ ุญุชู ุงูุฐูู ูุง ูููููู ููุงู (ุงูููู ุงููุงุฑุบุฉ NULL ุชุนูู ุนุฏู ูุฌูุฏ ููุงู).

3๏ธโฃ RIGHT JOIN - ุฌููุน ุงูููุงู ูุน ุฃู ุจุฏูู ูุณุชุฎุฏููู
$todosWithUsers = DB::table('users')
    ->rightJoin('todos', 'users.id', '=', 'todos.user_id') // RIGHT JOIN
    ->select('users.id', 'users.name', 'users.email', 'todos.*')
    ->get();

dd($todosWithUsers);
โ ูุฌูุจ ุฌููุน ุงูููุงูุ ุญุชู ูู ูู ููู ููุง ูุณุชุฎุฏู ูุณุฌู.

4๏ธโฃ CROSS JOIN - ุฌููุน ุงูุชุจุงุฏูู ุงูููููุฉ ุจูู ุงููุณุชุฎุฏููู ูุงูููุงู
$crossJoinUsersTodos = DB::table('users')
    ->crossJoin('todos') // CROSS JOIN
    ->select('users.id', 'users.name', 'todos.title')
    ->get();

dd($crossJoinUsersTodos);
โ ููุชุฌ ุฌููุน ุงูุชููููุงุช ุงูููููุฉ ุจูู ุงููุณุชุฎุฏููู ูุงูููุงูุ ุญุชู ูู ูู ุชูู ููุงู ุนูุงูุฉ ุจูููู.

5๏ธโฃ FULL OUTER JOIN - (ุบูุฑ ูุฏุนูู ูุจุงุดุฑุฉ ูู Laravel Query Builderุ ููู ูููู ูุญุงูุงุชู ุจู UNION)
$fullOuterJoin = DB::table('users')
    ->leftJoin('todos', 'users.id', '=', 'todos.user_id')
    ->select('users.id', 'users.name', 'todos.title')
    ->union(
        DB::table('users')
            ->rightJoin('todos', 'users.id', '=', 'todos.user_id')
            ->select('users.id', 'users.name', 'todos.title')
    )
    ->get();

dd($fullOuterJoin);
โ ูุฌูุจ ุฌููุน ุงููุณุชุฎุฏููู ูุงูููุงูุ ุญุชู ูู ูู ููู ุจูููู ุงุฑุชุจุงุท.

6๏ธโฃ WHERE EXISTS - ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ููุงู (ุจุฏูู ุนู JOIN)
$usersWithTodos = DB::table('users')
    ->whereExists(function ($query) {
        $query->select(DB::raw(1))
              ->from('todos')
              ->whereRaw('todos.user_id = users.id');  
    })
    ->get();

dd($usersWithTodos);
โ ุทุฑููุฉ ุจุฏููุฉ ููุญุตูู ุนูู ุงููุณุชุฎุฏููู ุงูุฐูู ูุฏููู ููุงู ุจุฏูู ุงุณุชุฎุฏุงู JOIN.

7๏ธโฃ WHERE NOT EXISTS - ุงููุณุชุฎุฏููู ุงูุฐูู ูุง ูููููู ููุงู
$usersWithoutTodos = DB::table('users')
    ->whereNotExists(function ($query) {
        $query->select(DB::raw(1))
              ->from('todos')
              ->whereRaw('todos.user_id = users.id');  
    })
    ->get();

dd($usersWithoutTodos);
โ ูุฌูุจ ุงููุณุชุฎุฏููู ุงูุฐูู ูุง ูููููู ุฃู ููุงู ูุณุฌูุฉ.



$todosWithUsers = DB::table('todos')
    ->join('users', 'todos.user_id', '=', 'users.id') // Join with users table
    ->select('todos.*', 'users.name as user_name') // Select todo fields and user name
    ->orderBy('todos.created_at', 'desc') // Order by latest created tasks
    ->limit(10) // Limit the number of results
    ->get(); //->sql();

    transform to sql SELECT todos.*, users.name AS user_name
FROM todos
JOIN users ON todos.user_id = users.id
ORDER BY todos.created_at DESC
LIMIT 10;


$todosPaginated = DB::table('todos')
    ->join('users', 'todos.user_id', '=', 'users.id') // ุฑุจุท ุฌุฏูู todos ุจุฌุฏูู users ุจุงุณุชุฎุฏุงู user_id
    ->select('todos.*', 'users.name as user_name') // ุงุฎุชูุงุฑ ูู ุงูุฃุนูุฏุฉ ูู ุฌุฏูู todos ูุฃูุถุง ุงุณู ุงููุณุชุฎุฏู ูู ุฌุฏูู users
    ->simplePaginate(2); // ุชูุณูู ุงููุชุงุฆุฌ ุฅูู ุตูุญุงุช ูุน ุนุฑุถ 2 ุณุฌู ูู ูู ุตูุญุฉ
dd($todosPaginated);

get completed todos and users using subquery
$completedTodos = DB::table('todos')
    ->where('completed', 1) // ุชุญุฏูุฏ ุฃู ุงููููุฉ ููุชููุฉ (completed = 1)
    ->whereIn('user_id', function ($query) {
        $query->select('id')
              ->from('users')
              ->where('name', 'LIKE', '%Emilio%'); // ุงูุจุญุซ ุนู ุงููุณุชุฎุฏููู ุงูุฐูู ุชุญุชูู ุฃุณูุงุคูู ุนูู "Emilio"
    })
    ->get(); // ุฅุฑุฌุงุน ุงููุชุงุฆุฌ
dd($completedTodos); // ุนุฑุถ ุงููุชุงุฆุฌ

*/
namespace App\Http\Controllers;



use App\Models\Todo;
use Illuminate\Http\Request;

class TodoController extends Controller
{
    // ุนุฑุถ ูุงุฆูุฉ ุงูููุงู
    public function index(Request $request)
{
    // ุงุณุชูุจุงู ูููุฉ ุงูุจุญุซ ูู ุงูุทูุจ
    $todos = Todo::orderBy('created_at', 'desc')->paginate(5);
    return view('todos.index', compact('todos'));
}

    // ุฅุถุงูุฉ ูููุฉ ุฌุฏูุฏุฉ
    public function store(Request $request)
{
    $request->validate([
        'title' => 'required|string|max:255',
        'description' => 'nullable|string',
    ]);

    $todo = Todo::create([
        'title' => $request->title,
        'description' => $request->description,
        'completed' => 0,
        'user_id' => auth()->id(),
    ]);

    return redirect()->route('todos.index')->with('success', 'Todo added successfully!');

}


    // ุชุญุฏูุซ ุจูุงูุงุช ุงููููุฉ
    public function update(Request $request, Todo $todo, $id )
    {
        $request->validate([
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
        ]);

        $todo = Todo::findOrFail($id);
        $todo->update([
            'title' => $request->title,
            'description' => $request->description,
        ]);

        // return response()->json($todo);

        return response()->json([
            'id' => $todo->id,
            'title' => $todo->title,
            'description' => $todo->description,
        ]);
    }

    // ุญุฐู ุงููููุฉ
    public function destroy(Todo $todo, $id )
    {
        $todo = Todo::findOrFail($id);
        $todo->delete();
        return response()->json(['message' => 'Todo deleted successfully']);
    }

    // ุชุญุฏูุฏ ุงููููุฉ ูููุชููุฉ ุฃู ุบูุฑ ููุชููุฉ
    public function toggleComplete(Todo $todo,$id)
    {
        // $todo->completed = !$todo->completed; // ุนูุณ ูููุฉ `completed`
        // $todo->save();
        
        // return response()->json([
        // 'success' => true,
        // 'completed' => $todo->completed ]);
        $todo = Todo::findOrFail($id);
        $todo->completed = !$todo->completed; // ุชุจุฏูู ุงูุญุงูุฉ
        $todo->save();
        return response()->json([
            'id' => $todo->id,
            'completed' => $todo->completed,
        ]);
    }
    public function show($id)
    {
        $todo = Todo::findOrFail($id);
        return response()->json($todo); // ุฅุฑุฌุงุน ุจูุงูุงุช ุงูุชูุฏู ุจุตูุบุฉ JSON
    }

    public function trashed()
    {
        // Fetch soft-deleted todos
        $todos = Todo::onlyTrashed()->get(); // ุงุณุชุฑุฌุงุน ุงูููุงู ุงููุญุฐููุฉ ููุท
       
        return view('todos.trashed', compact('todos'));
    }
    

    public function restore($todo) {

        // $todo = Todo::withTrashed()->find($id);
        // if ($todo) {
        //     $todo->restore();
        //     return response()->json(['message' => 'Todo restored successfully.']);
        // }
        // return response()->json(['message' => 'Todo not found.'], 404);
        $todo = Todo::withTrashed()->findOrFail($todo);
        $todo->restore();
        return response()->json(['success' => true, 'message' => 'Todo restored successfully!']);
    }    
    
    public function forceDelete($todo) {
        $todo = Todo::withTrashed()->findOrFail($todo);
        $todo->forceDelete();
        return response()->json(['success' => true, 'message' => 'Todo deleted successfully!']);
    }
    


}
